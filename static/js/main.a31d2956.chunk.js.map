{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","onChangeInput","e","setState","input","target","value","setTimer","a","Date","state","getTime","date","buttonToggle","showInput","countDownDate","isNaN","resetTimer","countDownStart","startInterval","setInterval","presentTime","distance","msg","days","Math","floor","hours","minutes","seconds","clearInterval","userTime","localStorage","getItem","JSON","parse","showMsg","buttonShow","this","setItem","stringify","className","onChange","type","name","id","placeholder","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a31d2956.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport tachyons from \"tachyons\";\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            days: \"0\",\n            hours: \"0\",\n            minutes: \"0\",\n            seconds: \"0\",\n            input: \"\",\n            countDownDate: 0,\n            showInput: \"\",\n            msg: \"Timer ends on\",\n            buttonToggle: true,\n        };\n    }\n\n    componentDidMount() {\n        let userTime = localStorage.getItem(\"countDownDate\") !== null ? JSON.parse(localStorage.getItem(\"countDownDate\")) : \"\";\n        let showMsg = localStorage.getItem(\"showInput\") !== null ? JSON.parse(localStorage.getItem(\"showInput\")) : \"\";\n        let buttonShow = localStorage.getItem(\"buttonToggle\") !== null ? JSON.parse(localStorage.getItem(\"buttonToggle\")) : \"\";\n        this.setState({ countDownDate: userTime, showInput: showMsg, buttonToggle: buttonShow });\n        if (this.state.countDownDate !== null && this.state.countDownDate !== \"\") this.countDownStart();\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem(\"countDownDate\", JSON.stringify(this.state.countDownDate));\n        localStorage.setItem(\"showInput\", JSON.stringify(this.state.showInput));\n        localStorage.setItem(\"buttonToggle\", JSON.stringify(this.state.buttonToggle));\n    }\n    onChangeInput = (e) => {\n        this.setState({ input: e.target.value });\n    };\n    setTimer = async () => {\n        let date = await new Date(this.state.input).getTime();\n        await this.setState({ buttonToggle: false, showInput: this.state.input, countDownDate: date, input: \"\" });\n\n        if (isNaN(this.state.countDownDate)) {\n            this.resetTimer();\n            return;\n        }\n        this.countDownStart();\n    };\n\n    countDownStart = () => {\n        if (this.state.countDownDate === \"\" || this.state.countDownDate === null) {\n            return;\n        }\n        this.startInterval = setInterval(async () => {\n            var presentTime = await new Date().getTime();\n            var distance = this.state.countDownDate - presentTime;\n            if (isNaN(distance)) return;\n            distance <= 0\n                ? this.setState({ msg: \"Invalid date type or Time has already ended on\" })\n                : this.setState({\n                      msg: \"Timer ends on\",\n                      days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n                      hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n                      minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n                      seconds: Math.floor((distance % (1000 * 60)) / 1000),\n                  });\n        }, 1000);\n    };\n\n    resetTimer = () => {\n        clearInterval(this.startInterval);\n        this.setState({ days: \"0\", hours: \"0\", minutes: \"0\", seconds: \"0\", input: \"\", countDownDate: \"\", showInput: \"\", msg: \"Timer ends on\", buttonToggle: true });\n    };\n\n    render() {\n        return (\n            <div className=\"tc mt4\">\n                <h1 className=\"dark-blue\">{\"Countdown Timer\"}</h1>\n                <div className=\"mt5 washed-blue\">\n                    <h3>{`${this.state.msg} ${this.state.showInput}`}</h3>\n                    <h3>{`${this.state.days} Days ${this.state.hours} Hours ${this.state.minutes} Mins ${this.state.seconds} Seconds`}</h3>\n\n                    {this.state.buttonToggle ? (\n                        <div>\n                            <input className=\"pa2 br2 bn\" onChange={this.onChangeInput} type=\"text\" name=\"timerInput\" id=\"timerInput\" placeholder=\"Enter date\" value={this.state.input} />\n                            <button className=\"ml3 bn br3 pa2 fw5 bg-light-green\" onClick={() => this.setTimer()}>\n                                {\"Start Countdown\"}\n                            </button>\n                        </div>\n                    ) : (\n                        <button className=\"ml3 bn br3 pa2 fw5 bg-light-red\" onClick={() => this.resetTimer()}>\n                            {\"Stop Countdown\"}\n                        </button>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}