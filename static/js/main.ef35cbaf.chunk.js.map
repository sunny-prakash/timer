{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","onChangeInput","e","setState","input","target","value","setTimer","a","msg","Date","state","getTime","date","countDownDate","isNaN","console","log","buttonToggle","showInput","countDownStart","startInterval","setInterval","presentTime","distance","days","Math","floor","hours","minutes","seconds","resetTimer","clearInterval","className","this","onChange","type","name","id","placeholder","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAyFeA,E,kDApFX,aAAe,IAAD,8BACV,gBAeJC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SAjBtB,EAmBdC,SAnBc,sBAmBH,4BAAAC,EAAA,6DACP,EAAKL,SAAS,CAACM,IAAI,KADZ,SAGU,IAAIC,KAAK,EAAKC,MAAMP,OAAOQ,UAHrC,UAGHC,EAHG,OAIP,EAAKV,SAAS,CAAEW,cAAeD,IAEE,MAA7B,EAAKF,MAAMG,eAA6C,MAApB,EAAKH,MAAMP,QAAiBW,MAAM,EAAKJ,MAAMG,gBAA6C,KAA7B,EAAKH,MAAMG,eAAqD,OAA7B,EAAKH,MAAMG,cAN5I,uBAOHE,QAAQC,IAAI,0CACZ,EAAKd,SAAS,CAACM,IAAI,mBAAmBL,MAAO,GAAGc,cAAc,IAR3D,0BAYP,EAAKf,SAAS,CAACe,cAAc,EAAOC,UAAW,EAAKR,MAAMP,MAAOA,MAAO,KACxE,EAAKgB,iBAbE,4CAnBG,EAmCdA,eAAiB,WAEb,EAAKC,cAAgBC,aAAY,WAC7B,IAAIC,GAAc,IAAIb,MAAOE,UACzBY,EAAW,EAAKb,MAAMG,cAAgBS,EACtCR,MAAMS,KACVA,GAAY,EACN,EAAKrB,SAAS,CAAEM,IAAK,8BACrB,EAAKN,SAAS,CACVM,IAAK,gBACLgB,KAAMC,KAAKC,MAAMH,EAAQ,OACzBI,MAAOF,KAAKC,MAAOH,EAAQ,MAAT,MAClBK,QAASH,KAAKC,MAAOH,EAAQ,KAAT,KACpBM,QAASJ,KAAKC,MAAOH,EAAQ,IAAkB,UAE1D,MAlDO,EAqDdO,WAAa,WACTC,cAAc,EAAKX,eACnB,EAAKlB,SAAS,CAAEsB,KAAM,IAAKG,MAAO,IAAKC,QAAS,IAAKC,QAAS,IAAK1B,MAAO,GAAIU,cAAe,GAAIK,UAAW,GAAIV,IAAK,4BAA6BS,cAAc,KArDhK,EAAKP,MAAQ,CACTc,KAAM,IACNG,MAAO,IACPC,QAAS,IACTC,QAAS,IACT1B,MAAO,GACPU,cAAe,EACfK,UAAW,GACXV,IAAK,4BACLS,cAAc,GAXR,E,0CA0Dd,WAAU,IAAD,OACL,OACI,sBAAKe,UAAU,SAAf,UACI,oBAAIA,UAAU,eAAd,SAA8B,oBAC9B,sBAAKA,UAAU,qBAAf,UACI,uCAAQC,KAAKvB,MAAMF,IAAnB,YAA0ByB,KAAKvB,MAAMQ,aACrC,uCAAQe,KAAKvB,MAAMc,KAAnB,iBAAgCS,KAAKvB,MAAMiB,MAA3C,kBAA0DM,KAAKvB,MAAMkB,QAArE,iBAAqFK,KAAKvB,MAAMmB,QAAhG,cAECI,KAAKvB,MAAMO,aACR,gCACI,uBAAOe,UAAU,aAAaE,SAAUD,KAAKjC,cAAemC,KAAK,OAAOC,KAAK,aAAaC,GAAG,aAAaC,YAAY,kBAAkBjC,MAAO4B,KAAKvB,MAAMP,QAC1J,wBAAQ6B,UAAU,oCAAoCO,QAAS,kBAAM,EAAKjC,YAA1E,SACK,uBAIT,wBAAQ0B,UAAU,kCAAkCO,QAAS,kBAAM,EAAKT,cAAxE,SACK,oB,GA5EXU,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef35cbaf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport tachyons from \"tachyons\";\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            days: \"0\",\n            hours: \"0\",\n            minutes: \"0\",\n            seconds: \"0\",\n            input: \"\",\n            countDownDate: 0,\n            showInput: \"\",\n            msg: \"Enter date to start Timer\",\n            buttonToggle: true,\n        };\n    }\n\n    \n    onChangeInput = (e) => {\n        this.setState({ input: e.target.value });\n    };\n    setTimer = async () => {\n        this.setState({msg:\"\"});\n        // console.log(\"inside setTimer\");\n        let date = await new Date(this.state.input).getTime();\n        this.setState({ countDownDate: date });\n        // console.log(\"countDownDate \",this.state.countDownDate);\n        if (this.state.countDownDate === \"0\" || this.state.input ===\"0\" ||  isNaN(this.state.countDownDate)||this.state.countDownDate === \"\" || this.state.countDownDate === null) {\n            console.log(\"inside isNaN(this.state.countDownDate)\");\n            this.setState({msg:\"Enter Valid Date\",input: \"\",buttonToggle: false,});\n            \n            return;\n        }\n        this.setState({buttonToggle: false, showInput: this.state.input, input: \"\" });\n        this.countDownStart();\n    };\n\n    countDownStart = () => {\n        // console.log(\"going to start startInterval\");\n        this.startInterval = setInterval(() => {\n            var presentTime = new Date().getTime();\n            var distance = this.state.countDownDate - presentTime;\n            if (isNaN(distance)) return;\n            distance <= 0\n                ? this.setState({ msg: \"Time has already ended on\" })\n                : this.setState({\n                      msg: \"Timer ends on\",\n                      days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n                      hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n                      minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n                      seconds: Math.floor((distance % (1000 * 60)) / 1000),\n                  });\n        }, 1000);\n    };\n\n    resetTimer = () => {\n        clearInterval(this.startInterval);\n        this.setState({ days: \"0\", hours: \"0\", minutes: \"0\", seconds: \"0\", input: \"\", countDownDate: \"\", showInput: \"\", msg: \"Enter date to start Timer\", buttonToggle: true });\n    };\n\n    render() {\n        return (\n            <div className=\"tc mt4\">\n                <h1 className=\"dark-blue f1\">{\"Countdown Timer\"}</h1>\n                <div className=\"mt5 washed-blue f3\">\n                    <h3>{`${this.state.msg} ${this.state.showInput}`}</h3>\n                    <h3>{`${this.state.days} Days ${this.state.hours} Hours ${this.state.minutes} Mins ${this.state.seconds} Seconds`}</h3>\n\n                    {this.state.buttonToggle ? (\n                        <div>\n                            <input className=\"pa2 br2 bn\" onChange={this.onChangeInput} type=\"text\" name=\"timerInput\" id=\"timerInput\" placeholder=\"Ex. 26 may 2022\" value={this.state.input} />\n                            <button className=\"ml3 bn br3 pa2 fw5 bg-light-green\" onClick={() => this.setTimer()}>\n                                {\"Start Countdown\"}\n                            </button>\n                        </div>\n                    ) : (\n                        <button className=\"ml3 bn br3 pa2 fw5 bg-light-red\" onClick={() => this.resetTimer()}>\n                            {\"RESET\"}\n                        </button>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}